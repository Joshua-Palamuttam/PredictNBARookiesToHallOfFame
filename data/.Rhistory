## Step 4: Evaluating model performance ----
# predictions on testing dataset
letter_predictions <- predict(letter_classifier, letters_test)
head(letter_predictions)
table(letter_predictions, letters_test$letter)
table(letter_predictions, letters_test$letter)
letter_classifier <- ksvm(letter ~ ., data = letters_train,
kernel = "vanilladot")
# look only at agreement vs. non-agreement
# construct a vector of TRUE/FALSE indicating correct/incorrect predictions
agreement <- letter_predictions == letters_test$letter
table(agreement)
prop.table(table(agreement))
## Step 5: Improving model performance ----
set.seed(12345)
letter_classifier_rbf <- ksvm(letter ~ ., data = letters_train, kernel = "rbfdot")
letter_predictions_rbf <- predict(letter_classifier_rbf, letters_test)
agreement_rbf <- letter_predictions_rbf == letters_test$letter
table(agreement_rbf)
prop.table(table(agreement_rbf))
# Domke
setwd("C:/Users/domkema/Google Drive/Rose-Hulman/2017-2018 Senior Year/CSSE290 machine learning/Team Space JAM Project_/data")
rookie <- read.csv(
"NBA Rookies by Year - All Star and HoF designations.csv",
stringsAsFactors = FALSE)
rookie_n = as.data.frame(lapply(rookie[3:24], normalize)) # normalizing player data; excluding name and rookie year
str(rookie_n)
rookie_n
rookie_train<-rookie_n[1:1000,]
rookie_test<-rookie_n[1001:1538,]
library(neuralnet)
set.seed(12345)
column_names<-paste(colnames(rookie_n)[1:21], collapse = '+')
column_names
rookie_form<-as.formula(paste('HOF','~',column_names))
rookie_model<-neuralnet(rookie_form,data=rookie_train)
plot(rookie_model)
# obtain model results
model_results <- compute(rookie_model, rookie_test[1:21])
# obtain predicted strength values
predicted_HOF <- model_results$net.result
# examine the correlation between predicted and actual values
cor(predicted_HOF, rookie_test$sHOF)
rookie_model2<-neuralnet(rookie_form,data=rookie_train, hidden=5)
plot(rookie_model2)
rookie_model2<-neuralnet(rookie_form,data=rookie_train, hidden=7)
rookie_model2<-neuralnet(rookie_form,data=rookie_train, hidden=7)
plot(rookie_model2)
rookie_model2<-neuralnet(rookie_form,data=rookie_train, hidden=8)
set.seed(12346)
rookie_model2<-neuralnet(rookie_form,data=rookie_train, hidden=8)
plot(rookie_model2)
rookie_model2<-neuralnet(rookie_form,data=rookie_train, hidden=7)
rookie_model2<-neuralnet(rookie_form,data=rookie_train, hidden=5)
set.seed(12345)
column_names<-paste(colnames(rookie_n)[1:21], collapse = '+')
column_names
rookie_form<-as.formula(paste('HOF','~',column_names))
rookie_model<-neuralnet(rookie_form,data=rookie_train)
plot(rookie_model)
# obtain model results
model_results <- compute(rookie_model, rookie_test[1:21])
# obtain predicted strength values
predicted_HOF <- model_results$net.result
# examine the correlation between predicted and actual values
cor(predicted_HOF, rookie_test$sHOF)
rookie_model2<-neuralnet(rookie_form,data=rookie_train, hidden=5)
plot(rookie_model2)
# obtain model results
model_results <- compute(rookie_model2, rookie_test[1:21])
# obtain predicted strength values
predicted_HOF <- model_results$net.result
# examine the correlation between predicted and actual values
cor(predicted_HOF, rookie_test$HOF)
# visualize the network topology
plot(concrete_model)
# plot the network
plot(concrete_model2)
setwd("C:/Users/domkema/Google Drive/Rose-Hulman/2017-2018 Senior Year/CSSE290 machine learning/Rstuff/Ch8")
install.packages("arules")
# load the grocery data into a sparse matrix
library(arules)
groceries <- read.transactions("groceries.csv", sep = ",")
summary(groceries)
# look at the first five transactions
inspect(groceries[1:5])
# examine the frequency of items
itemFrequency(groceries[, 1:3])
# plot the frequency of items
itemFrequencyPlot(groceries, support = 0.1)
itemFrequencyPlot(groceries, topN = 20)
# a visualization of the sparse matrix for the first five transactions
image(groceries[1:5])
# visualization of a random sample of 100 transactions
image(sample(groceries, 100))
## Step 3: Training a model on the data ----
library(arules)
# default settings result in zero rules learned
apriori(groceries)
# set better support and confidence levels to learn more rules
groceryrules <- apriori(groceries, parameter = list(support =
0.006, confidence = 0.25, minlen = 2))
groceryrules
## Step 4: Evaluating model performance ----
# summary of grocery association rules
summary(groceryrules)
# look at the first three rules
inspect(groceryrules[1:3])
# sorting grocery rules by lift
inspect(sort(groceryrules, by = "lift")[1:5])
# finding subsets of rules containing any berry items
berryrules <- subset(groceryrules, items %in% "berries")
inspect(berryrules)
# writing the rules to a CSV file
write(groceryrules, file = "groceryrules.csv",
sep = ",", quote = TRUE, row.names = FALSE)
# converting the rule set to a data frame
groceryrules_df <- as(groceryrules, "data.frame")
str(groceryrules_df)
# plot the frequency of items
itemFrequencyPlot(groceries, support = 0.5)
itemFrequencyPlot(groceries, topN = 10)
itemFrequencyPlot?
adf
?itemFrequencyPlot
itemFrequencyPlot(groceries, weghted = 2)
itemFrequencyPlot(groceries, weghted = 1)
itemFrequencyPlot(groceries, weghted = 5)
itemFrequencyPlot(groceries)
itemFrequencyPlot(groceries, topN = 20)
load("C:/Users/domkema/Google Drive/Rose-Hulman/2017-2018 Senior Year/CSSE290 machine learning/Rstuff/exam1/exam_work_space.RData")
setwd("C:/Users/domkema/Google Drive/Rose-Hulman/2017-2018 Senior Year/CSSE290 machine learning/Team Space JAM Project_/exam2")
rm(list=ls())
# read credit.cvs file
credit <- read.csv("credit.csv")
# determining training and testing data
set.seed(212)
train_sample <- sample(1000, 900)
credit_train <- credit[train_sample, ]
credit_test  <- credit[-train_sample, ]
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
setwd("C:/Users/domkema/Google Drive/Rose-Hulman/2017-2018 Senior Year/CSSE290 machine learning/Team Space JAM Project_/exam2")
setwd("C:/Users/domkema/Google Drive/Rose-Hulman/2017-2018 Senior Year/CSSE290 machine learning/Rstuff/exam2")
# read credit.cvs file
credit <- read.csv("credit.csv")
# determining training and testing data
set.seed(212)
train_sample <- sample(1000, 900)
credit_train <- credit[train_sample, ]
credit_test  <- credit[-train_sample, ]
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
# determining training and testing data
set.seed(123)
train_sample <- sample(1000, 900)
credit_train <- credit[train_sample, ]
credit_test  <- credit[-train_sample, ]
prop.table(table(credit_train$default))
prop.table(table(credit_test$default))
summary(credit_test)
mod(credit_test)
model(credit_test)
modle(credit_test)
str(credit)
credit_classifier = naiveBayes(credit_train[-17], credit_train$default)
library(e1071)
credit_classifier = naiveBayes(credit_train[-17], credit_train$default)
credit_test_pred <- predict(credit_classifier, credit_test)
library(gmodels)
CrossTable(sms_test_pred, sms_test_labels,
prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE,
dnn = c('predicted', 'actual'))
credit
credit_classifier = naiveBayes(credit_train[-17], credit_train$default)
credit_classifier = naiveBayes(credit_train[-17], credit_train$default)
# Testing
credit_test_pred <- predict(credit_classifier, credit_test)
library(gmodels)
CrossTable(credit_test_pred, credit_test_labels,
prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE,
dnn = c('predicted', 'actual'))
CrossTable(credit_test_pred, credit_test$default,
prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE,
dnn = c('predicted', 'actual'))
setwd("C:/Users/domkema/Google Drive/Rose-Hulman/2017-2018 Senior Year/CSSE290 machine learning/Rstuff/Ch9")
## Example: Finding Teen Market Segments ----
## Step 2: Exploring and preparing the data ----
teens <- read.csv("snsdata.csv")
str(teens)
# look at missing data for female variable
table(teens$gender)
table(teens$gender, useNA = "ifany")
# look at missing data for age variable
summary(teens$age)
# eliminate age outliers
teens$age <- ifelse(teens$age >= 13 & teens$age < 20,
teens$age, NA)
summary(teens$age)
# reassign missing gender values to "unknown"
teens$female <- ifelse(teens$gender == "F" &
!is.na(teens$gender), 1, 0)
teens$no_gender <- ifelse(is.na(teens$gender), 1, 0)
# check our recoding work
table(teens$gender, useNA = "ifany")
table(teens$female, useNA = "ifany")
table(teens$no_gender, useNA = "ifany")
# finding the mean age by cohort
mean(teens$age) # doesn't work
mean(teens$age, na.rm = TRUE) # works
# age by cohort
aggregate(data = teens, age ~ gradyear, mean, na.rm = TRUE)
# create a vector with the average age for each gradyear, repeated by person
ave_age <- ave(teens$age, teens$gradyear,
FUN = function(x) mean(x, na.rm = TRUE))
teens$age <- ifelse(is.na(teens$age), ave_age, teens$age)
# check the summary results to ensure missing values are eliminated
summary(teens$age)
## Step 3: Training a model on the data ----
interests <- teens[5:40]
interests_z <- as.data.frame(lapply(interests, scale))
set.seed(2345)
teen_clusters <- kmeans(interests_z, 5)
## Step 4: Evaluating model performance ----
# look at the size of the clusters
teen_clusters$size
# look at the cluster centers
teen_clusters$centers
## Step 5: Improving model performance ----
# apply the cluster IDs to the original data frame
teens$cluster <- teen_clusters$cluster
# look at the first five records
teens[1:5, c("cluster", "gender", "age", "friends")]
# look at the cluster centers
teen_clusters$centers
teen_clusters <- kmeans(interests_z, 5)
## Step 4: Evaluating model performance ----
# look at the size of the clusters
teen_clusters$size
# look at the cluster centers
teen_clusters$centers
# Domke
setwd("C:/Users/domkema/Google Drive/Rose-Hulman/2017-2018 Senior Year/CSSE290 machine learning/Team Space JAM Project_/data")
rm(list=ls())
rookie <- read.csv(
"NBA Rookies by Year - All Star and HoF designations.csv",
stringsAsFactors = FALSE)
stats<-rookie[3:22]
stats_z<-as.data.frame(lapply(stats,scale))
set.seed(3)
rookie_clusters<-kmeans(stats,2)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$cluster)
rookie$sum = rookie$cluster + rookie$HOF
rookie[,c("sum")]
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
plot(x = rookie$cluster, y = rookie$HOF,
main = "Scatterplot of Rookie Cluster vs. HOF status",
xlab = "Rookie Cluster",
ylab = "HOF status",
cex = 1,  # defines the size of the plot point
pch = 15) # pch defines the shape of the plot point
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
rookie_clusters<-kmeans(stats,5)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
plot(x = rookie$cluster, y = rookie$HOF,
main = "Scatterplot of Rookie Cluster vs. HOF status",
xlab = "Rookie Cluster",
ylab = "HOF status",
cex = 1,  # defines the size of the plot point
pch = 15) # pch defines the shape of the plot point
rookie_clusters<-kmeans(stats,3)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
rookie_clusters<-kmeans(stats,2)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
rookie_clusters<-kmeans(stats,2)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
set.seed(3)
rookie_clusters<-kmeans(stats,2)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
set.seed(3)
rookie_clusters<-kmeans(stats,2)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
rookie_clusters<-kmeans(stats,3)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
rookie_clusters$centers
rookie_clusters<-kmeans(stats,2)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
rookie_clusters<-kmeans(stats,3)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
set.seed(3)
rookie_clusters<-kmeans(stats,3)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
rookie_clusters$centers
rookie_clusters<-kmeans(stats,4)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
rookie_clusters$centers
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
rookie[which(rookie[,c("cluster")]=2)]
rookie[which(rookie[,c("cluster")]==2)]
rookie[which(rookie[,c("cluster")])]
rookie[which(rookie[,c("cluster")]>1)]
rookie[which(rookie[,c("cluster")]>1),]
rookie[which(rookie[,c("cluster")]>3),]
rookie[which(rookie[,c("cluster")]>3),HOF]
rookie[which(rookie[,c("cluster")]>3),c("Name", "HOF")]
rookie[which(rookie[,c("cluster")]>3),c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("cluster")]>1&&<3),c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("cluster")]>1 || <3),c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("cluster")]=3),c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("cluster")]==3),c("Name", "cluster", "HOF")]
table(rookie$cluster)
rookie[which(rookie[,c("cluster")]==2),c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("cluster")]==1),c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("cluster")]==1 && c("HOF")==1),c("Name", "cluster", "HOF")]
rookie[which(rookie[,(c("cluster")]==1 && c("HOF")==1)),c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("cluster")]==1&&c("HOF")==1),c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("HOF")==1),c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("HOF")==1,c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("HOF")==1,c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("HOF")==1],c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("HOF")==1]),c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("HOF")==1)],c("Name", "cluster", "HOF")]
rookie[which(rookie[,c("HOF")]==1),c("Name", "cluster", "HOF")]
rookie_clusters<-kmeans(stats,12)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
rookie[which(rookie[,c("HOF")]==1),c("Name", "cluster", "HOF")]
table(which(rookie$cluster[,c("HOF")]==1))
table(which(rookie[,c("HOF")]==1), c("cluster"))
table(rookie[which(rookie[,c("HOF")]==1),c("Name", "cluster", "HOF")])
table(rookie[which(rookie[,c("HOF")]==1),c("cluster")])
rookie_clusters$centers
plot(x = rookie_clusters$cluster, y = rookie_clusters$GP,
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game",
col = rookie$Color,
cex = 1,  # defines the size of the plot point
pch = 15) # pch defines the shape of the plot point
plot(x = rookie_clusters$cluster, y = rookie_clusters$GP,
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game",
cex = 1,  # defines the size of the plot point
pch = 15) # pch defines the shape of the plot point
plot(x = rookie_clusters$GP, y = rookie_clusters$clusters,
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game",
cex = 1,  # defines the size of the plot point
pch = 15) # pch defines the shape of the plot point
plot(x = rookie_clusters$GP, y = rookie_clusters$cluster,
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game",
cex = 1,  # defines the size of the plot point
pch = 15) # pch defines the shape of the plot point
plot(x = rookie_clusters$centers, y = rookie_clusters$GP,
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game",
cex = 1,  # defines the size of the plot point
pch = 15) # pch defines the shape of the plot point
rookie_clusters$centers
plot(x = rookie_clusters[3,], y = rookie_clusters$GP,
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game",
cex = 1,  # defines the size of the plot point
pch = 15) # pch defines the shape of the plot point
plot(x = rookie_clusters[,,], y = rookie_clusters$GP,
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game",
cex = 1,  # defines the size of the plot point
pch = 15) # pch defines the shape of the plot point
plot(x = rookie_clusters[,3], y = rookie_clusters$GP,
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game",
cex = 1,  # defines the size of the plot point
pch = 15) # pch defines the shape of the plot point
plot(x = rookie_clusters$1, y = rookie_clusters$GP,
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game",
cex = 1,  # defines the size of the plot point
pch = 15) # pch defines the shape of the plot point
plot(x = rookie_clusters$1, y = rookie_clusters$GP,
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game") # pch defines the shape of the plot point
plot(x = rookie_clusters$_1, y = rookie_clusters$GP,
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game") # pch defines the shape of the plot point
plot(x = rookie_clusters$centers[1:12,], y = rookie_clusters$centers[,1],
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game") # pch defines the shape of the plot point
plot(x = rookie_clusters$centers[1:12,], y = rookie_clusters$centers[1,],
main = "Scatterplot of Rookie Year vs. Points per Game with HOF'ers in RED",
xlab = "Rookie draft year",
ylab = "Points per game") # pch defines the shape of the plot point
set.seed(3)
rookie_clusters<-kmeans(stats,2)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
table(rookie[which(rookie[,c("HOF")]==1),c("cluster")])
rookie[which(rookie[,c("HOF")]==1),c("Name", "cluster", "HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
table(rookie[which(rookie[,c("HOF")]==1),c("cluster")])
rookie_clusters$centers
rookie_clusters<-kmeans(stats,4)
rookie_clusters$centers
rookie_clusters$size
rookie$cluster<-rookie_clusters$cluster
rookie[,c("cluster","Name", "PTS","All.Star","HOF")]
table(rookie$cluster)
table(rookie$HOF)
table(rookie$cluster+rookie$HOF)
table(rookie[which(rookie[,c("HOF")]==1),c("cluster")])
rookie[which(rookie[,c("HOF")]==1),c("Name", "cluster", "HOF")]
table(rookie$HOF)
table(rookie$cluster)
table(rookie$cluster+rookie$HOF)
table(rookie[which(rookie[,c("HOF")]==1),c("cluster")])
rookie_clusters$centers
